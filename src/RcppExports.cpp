// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// const_c
double const_c(const double sigw, const double sigv);
RcppExport SEXP _covarianceBP_const_c(SEXP sigwSEXP, SEXP sigvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type sigw(sigwSEXP);
    Rcpp::traits::input_parameter< const double >::type sigv(sigvSEXP);
    rcpp_result_gen = Rcpp::wrap(const_c(sigw, sigv));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(const int n, const arma::vec mu, const arma::mat Sigma);
RcppExport SEXP _covarianceBP_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_covarianceBP_const_c", (DL_FUNC) &_covarianceBP_const_c, 2},
    {"_covarianceBP_mvrnormArma", (DL_FUNC) &_covarianceBP_mvrnormArma, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_covarianceBP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
